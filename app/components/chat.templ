package components

import (
	"chatter/app/types"
	"fmt"
)

templ ChatDisplay(c types.Chat, msgs []types.SendMessage, members []types.User) {
	<script>
    function scrollBottom(el) {el.scrollTo({top: el.scrollHeight, left: 0, behavior: "smooth"})}
    document.addEventListener("htmx:wsAfterMessage", (e) => scrollBottom(document.getElementById("chat_room")))
    </script>
	@ModalListeners()
	<style>
    input:invalid {}
</style>
	<section class="section" _="init scrollBottom(#chat_room)">
		<div class="container is-max-desktop">
			<div class="is-flex is-flex-direction-row is-justify-content-space-between">
				<h1 class="title">{ c.Name }</h1>
				@ChatDropdown()
			</div>
			<h2
				class="subtitle"
				style="padding-bottom: 0.5rem; border-bottom: 0.5rem solid var(--bulma-primary-on-scheme);"
			>
				{ c.Id.String() }
			</h2>
			<div class="content">
				<div hx-ext="ws" ws-connect={ fmt.Sprintf("/chatroom/%s/ws", c.Id.String()) }>
					<div
						id="chat_room"
						class="block has-background-black-ter"
						style="
                          width: 100%;
                          height: 60dvh;
                          overflow-y: scroll;
                          padding-top: 1rem;
                        "
					>
						for _, msg := range msgs {
							@Message(msg)
						}
					</div>
					<div class="block">
						<form id="form" ws-send _="on submit send resetInput to <input/> in me" autocomplete="off">
							<input
								id="messageInput"
								name="chat_message"
								class="input block"
								type="text"
								placeholder="Escreva sua mensagem aqui"
								_="on resetInput set my value to ''
                                   on invalid halt default end"
								autofocus
								required
							/>
							<button class="button is-success block">
								Enviar
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</section>
	@ChatMembersModal(c, members)
	@AddMemberModal(c)
}

templ ChatDropdown() {
	<div class="dropdown" _="on click toggle .is-active on me">
		<div class="dropdown-trigger">
			<button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
				<span>...</span>
				<span class="icon is-small">
					<i class="fas fa-angle-down" aria-hidden="true"></i>
				</span>
			</button>
		</div>
		<div class="dropdown-menu" id="dropdown-menu" role="menu">
			<div class="dropdown-content">
				<div class="dropdown-item">
					<button class="modal-trigger" data-target="members-list-modal">
						Ver Membros
					</button>
				</div>
				<hr class="dropdown-divider"/>
				<div class="dropdown-item">
					<button class="modal-trigger" data-target="add-member-modal">
						Adicionar Membro
					</button>
				</div>
			</div>
		</div>
	</div>
}

templ ModalListeners() {
	<script>
    document.addEventListener('DOMContentLoaded', () => {
        function openModal(el) {el.classList.add('is-active')}
        function closeModal(el) {el.classList.remove('is-active')}
        function closeAllModals() {
            (document.querySelectorAll('.modal') || []).forEach((modal) => closeModal(modal));
        }

        (document.querySelectorAll('.modal-trigger') || []).forEach((trigger) => {
            const modal = trigger.dataset.target;
            const target = document.getElementById(modal);

            trigger.addEventListener('click', () => {
                openModal(target);
            });
        });

        (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || [])
            .forEach(
                (close) => {
                    const target = close.closest('.modal');
                    close.addEventListener('click', () => closeModal(target));
                }
            );
        document.addEventListener('keydown', (e) => {if (e.key === "Escape") {closeAllModals()} });
    });
</script>
}

